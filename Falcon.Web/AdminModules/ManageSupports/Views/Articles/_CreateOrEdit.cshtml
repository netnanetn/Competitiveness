@model ArticleModel
<table cellspacing="0" class="form-list">
    <tr>
        <td class="label">@Html.LabelRequiredFor(model => model.CategoryId)</td>
        <td class="value">
            @{
                //List<Category> subList = Model.ListCategories.Where(c => c.CategoryTypeId == Model.CategoryTypeId).ToList();
                object htmlAttributeSub = new { @class = "input-text" };
                bool disableSub = false;
                //if (subList.Count == 0)
                //{
                //    disableSub = true;
                //    htmlAttributeSub = new {@class = "input-text", disabled = "disabled" };
                //}
                @Html.DropDownListFor(model => model.CategoryId, new SelectList(Model.ListCategories, "Id", "Name", !disableSub ? Model.CategoryId : 0), "-- Danh mục --", htmlAttributeSub )
                <br />@Html.ValidationMessageFor(model => model.CategoryId)
            }
        </td>
    </tr>
    <tr>
        <td class="label">@Html.LabelRequiredFor(model => model.Name)</td>
        <td class="value">
            @Html.TextBoxFor(model => model.Name, new { @class = "input-text" })

            <br />@Html.ValidationMessageFor(model => model.Name)
        </td>
    </tr>
    
    <tr>
        <td class="label">@Html.LabelRequiredFor(model => model.Alias)</td>
        <td class="value">
            @Html.TextBoxFor(model => model.Alias, new { @class = "input-text" })

            <br />@Html.ValidationMessageFor(model => model.Alias)
        </td>
    </tr>
    <tr>
        <td class="label">@Html.LabelRequiredFor(model => model.MetaTitle)</td>
        <td class="value">
            @Html.TextBoxFor(model => model.MetaTitle, new { @class = "input-text" })

            <br />@Html.ValidationMessageFor(model => model.MetaTitle)
        </td>
    </tr>
    <tr>
        <td class="label">@Html.LabelRequiredFor(model => model.MetaDescription)</td>
        <td class="value">
            @Html.TextAreaFor(model => model.MetaDescription, new { @class = "input-text" })

            <br />@Html.ValidationMessageFor(model => model.MetaDescription)
        </td>
    </tr>

    <tr>
        <td class="label">@Html.LabelRequiredFor(model => model.Status)</td>
        <td class="value">
            @Html.CheckBoxFor(model => model.Status)
            <br />@Html.ValidationMessageFor(model => model.Status)
        </td>
    </tr> 

    <tr>
        <td class="label">@Html.LabelFor(model => model.Keyword)</td>
        <td class="value">
            @Html.TextBoxFor(model => model.Keyword, new { @class = "input-text" })
            <br />@Html.ValidationMessageFor(model => model.Keyword)
        </td>
    </tr>
       
    <tr>
        <td class="label">@Html.LabelRequiredFor(model => model.Content)</td>
        <td class="value">
            @Html.TextAreaFor(model => model.Content, new { style = "width:600px;height:600px;", id = "Content" })
            <br />@Html.ValidationMessageFor(model => model.Content)
        </td>
    </tr>

    <tr>
        <td class="label">@Html.LabelFor(model => model.Description)</td>
        <td class="value">
            @Html.TextAreaFor(model => model.Description, new { style = "width:600px;height:600px;", id = "Decription" })
            <br />@Html.ValidationMessageFor(model => model.Description)
        </td>
    </tr>

    <tr>
        <td class="label">@Html.LabelFor(model => model.IsHighlight)</td>
        <td class="value">
            @Html.CheckBoxFor(model => model.IsHighlight)
            <br />@Html.ValidationMessageFor(model => model.IsHighlight)
        </td>
    </tr>

    <tr>
        <td class="label">@Html.LabelFor(model => model.ImgPath)</td>
        <td class="value">
            @Html.HiddenFor(model => model.ImgPath)

            @if (!string.IsNullOrEmpty(Model.ImgPath))
            {
                <img style="max-width: 200px;" id="img-path" src="@Url.Content(Model.ImgPath)" alt="" />
            }
            else
            {
                <img img style="max-width: 200px;" id="img-path" src="@Url.Content("~/Content/default.gif")" alt=""  />
            }

            <div>
                <input style="max-width: 200px;" type="file" name="datafile" accept="image/*" />
            </div>
            @*@Html.TextBoxFor(model => model.ImagePath, new { @class = "input-text" })*@

            <br />@Html.ValidationMessageFor(model => model.ImgPath)
        </td>
    </tr>

</table>
<script type="text/javascript">
    @*var catList = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.ListCategories.Select(c => new { c.Id, c.Name, c.CategoryTypeId })));*@
    @*var typeList = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.ListCategoryTypes.Select(c => new { c.Id, c.Name })));*@

    function getCatById(id)
    {
        var cat =  catList.filter(function(value,index){
            return  value.Id == id;
        });
        return cat.length > 0 ? cat[0] : null;
    }
    function getCatByType(typeId)
    {
        return  catList.filter(function(value,index){
            return  value.CategoryTypeId == typeId;
        });
    }
    function setSelect(alias,dataValue,textValue,source,label)
    {
        $("option",alias).remove();
        var select = $(alias);
        if(select.prop) {
            var options = select.prop('options');
        }
        else {
            var options = select.attr('options');
        }
        options[0] = new Option(label,"",true,true);
        if(source.length >0)
        {
            select.removeAttr("disabled");
            $.each(source, function(index, value) {
                options[options.length] =new Option(value[textValue],value[dataValue]);
            });
        }
        else
        {
            select.attr("disabled","disabled");
        }
    }
    function reloadData()
    {
        var typeId = $("select[name='CategoryTypeId']").val();
        var category = getCatByType(typeId);
        setSelect("select[name='CategoryId']","Id","Name",category,"--Danh mục--");
    }
    $('#Content').tinymce({
            script_url: '@Url.Content("~/Scripts/tiny_mce/tiny_mce.js")',
            theme: "advanced",
            plugins: "pagebreak,style,layer,table,save,advhr,advimage,advlink,emotions,iespell,inlinepopups,insertdatetime,preview,media,searchreplace,print,contextmenu,paste,directionality,fullscreen,noneditable,visualchars,nonbreaking,xhtmlxtras,template,wordcount,advlist,autosave",

        // Theme options
            theme_advanced_buttons1: "save,newdocument,|,bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,styleselect,formatselect,fontselect,fontsizeselect",
            theme_advanced_buttons2: "cut,copy,paste,pastetext,pasteword,|,search,replace,|,bullist,numlist,|,outdent,indent,blockquote,|,undo,redo,|,link,unlink,anchor,image,cleanup,help,code,|,insertdate,inserttime,preview,|,forecolor,backcolor",
            theme_advanced_toolbar_location: "top",
            theme_advanced_toolbar_align: "left",
            theme_advanced_statusbar_location: "bottom",
            theme_advanced_resizing: true,
            relative_urls: false,
        //plugin_simplebrowser_browseimageurl: "/Upload",
            extended_valid_elements: "iframe[title|class|type|width|height|src|frameborder|allowfullscreen]",
            content_css : "/Themes/Portal/Default/Styles/dist/style.css"
    });
    $('#Decription').tinymce({
        script_url: '@Url.Content("~/Scripts/tiny_mce/tiny_mce.js")',
        theme: "advanced",
        plugins: "pagebreak,style,layer,table,save,advhr,advimage,advlink,emotions,iespell,inlinepopups,insertdatetime,preview,media,searchreplace,print,contextmenu,paste,directionality,fullscreen,noneditable,visualchars,nonbreaking,xhtmlxtras,template,wordcount,advlist,autosave",

        // Theme options
        theme_advanced_buttons1: "save,newdocument,|,bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,styleselect,formatselect,fontselect,fontsizeselect",
        theme_advanced_buttons2: "cut,copy,paste,pastetext,pasteword,|,search,replace,|,bullist,numlist,|,outdent,indent,blockquote,|,undo,redo,|,link,unlink,anchor,image,cleanup,help,code,|,insertdate,inserttime,preview,|,forecolor,backcolor",
        theme_advanced_toolbar_location: "top",
        theme_advanced_toolbar_align: "left",
        theme_advanced_statusbar_location: "bottom",
        theme_advanced_resizing: true,
        relative_urls: false,
        //plugin_simplebrowser_browseimageurl: "/Upload",
        extended_valid_elements: "iframe[title|class|type|width|height|src|frameborder|allowfullscreen]",
        content_css: "/Themes/Portal/Default/Styles/dist/style.css"
    });
</script> 